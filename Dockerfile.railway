# Railway Production Dockerfile - Optimized for faster builds
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies including FFmpeg
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    ffmpeg \
    git \
    libmagic1 \
    libsndfile1 \
    tesseract-ocr \
    libtesseract-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies in a single layer with timeout settings
# Split into critical and non-critical packages for better build reliability
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --timeout=300 \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    cerebras-cloud-sdk==1.0.0 \
    chromadb==0.4.15 \
    sentence-transformers==2.3.1 \
    openai-whisper \
    pydub \
    python-dotenv \
    && pip install --no-cache-dir --timeout=300 -r requirements.txt || \
    pip install --no-cache-dir --timeout=600 -r requirements.txt

# Copy application code
COPY src ./src
COPY frontend ./frontend
COPY main.py .

# Create necessary directories
RUN mkdir -p /app/data /app/uploads /app/data/chroma_db /app/data/thumbnails /app/data/temp

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PORT=8000
ENV HF_HOME=/app/data/models
ENV TRANSFORMERS_CACHE=/app/data/models

# Expose port (Railway will override this with $PORT)
EXPOSE ${PORT}

# Health check with longer timeout for model loading
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Command to run the application
CMD python -m uvicorn src.api.main:app --host 0.0.0.0 --port ${PORT} --workers 1
